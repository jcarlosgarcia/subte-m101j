1
00:00:00,000 --> 00:00:00,290

2
00:00:00,290 --> 00:00:01,100
Hola, soy Jeff.

3
00:00:01,100 --> 00:00:06,380
Como ésta es una clase de MongoDB
con Java, tenemos que configurar

4
00:00:06,380 --> 00:00:08,109
nuestro ambiente de desarrollo Java.

5
00:00:08,109 --> 00:00:12,390
Vamos a usar algunas herramientas
en las lecciones y en las tareas

6
00:00:12,390 --> 00:00:16,050
y quiero presentarlas hoy.

7
00:00:16,050 --> 00:00:18,350
Lo primero que necesitamos es
una herramienta que nos ayude

8
00:00:18,350 --> 00:00:19,780
a automatizar la construcción
de nuestra aplicación.

9
00:00:19,780 --> 00:00:22,140
Hay un par que podríamos escoger,
pero para esta clase, vamos a

10
00:00:22,140 --> 00:00:23,880
utilizar Maven.

11
00:00:23,880 --> 00:00:26,360
Probablemente ya tienes Maven
en tu sistema, pero si no,

12
00:00:26,360 --> 00:00:28,550
lo puedes descargar.

13
00:00:28,550 --> 00:00:33,540
Simplemente haz una búsqueda por
"Maven" en tu navegador web y

14
00:00:33,540 --> 00:00:35,800
sigue el enlace de descarga.

15
00:00:35,800 --> 00:00:38,100
Puedes descargar el tar.gz.

16
00:00:38,100 --> 00:00:42,140
Yo voy a descargar el archivo zip.

17
00:00:42,140 --> 00:00:45,870
Y luego voy a cd a mi
directorio "Downloads",

18
00:00:45,870 --> 00:00:47,155
ahí está,

19
00:00:47,155 --> 00:00:51,350
y voy a descomprimir el
archivo en su mismo sitio.

20
00:00:51,350 --> 00:00:54,470
Verás que hay un directorio
"apache-maven-3.0.4"

21
00:00:54,470 --> 00:01:00,460
que contiene un directorio "bin".

22
00:01:00,460 --> 00:01:02,740
Donde sea que instales Maven,
debes simplemente agregar ese

23
00:01:02,740 --> 00:01:06,910
directorio a tu "path" de la
manera apropiada para tu sistema.

24
00:01:06,910 --> 00:01:11,380
Ya está en mi "path", así que
no lo voy a volver a hacer.

25
00:01:11,380 --> 00:01:14,190
Voy a regresar a mi directorio
"home" y lo primero que voy

26
00:01:14,190 --> 00:01:18,280
a hacer es crear un nuevo
proyecto Maven.

27
00:01:18,280 --> 00:01:22,660
Maven utiliza un modelo de
objeto proyecto llamado "pom.xml".

28
00:01:22,660 --> 00:01:24,420
Lo puedes crear a mano, pero
yo voy a utilizar un plugin

29
00:01:24,420 --> 00:01:28,930
muy útil para Maven llamado
"Archetype" para crear un nuevo

30
00:01:28,930 --> 00:01:32,250
proyecto Maven vacío.

31
00:01:32,250 --> 00:01:36,420
Entonces si ingreso "mvn", el
cual es el ejecutable para Maven,

32
00:01:36,420 --> 00:01:40,380
"archetype:generate".

33
00:01:40,380 --> 00:01:42,740
Hay varios arquetipos de los
cuales podemos escoger, pero

34
00:01:42,740 --> 00:01:46,750
te da uno por defecto, 251,
el cual es uno de los que

35
00:01:46,750 --> 00:01:47,800
provee Maven.

36
00:01:47,800 --> 00:01:52,240
Simplemente voy a elegir ése
y escoger 6 para la versión

37
00:01:52,240 --> 00:01:54,160
más reciente de ese arquetipo.

38
00:01:54,160 --> 00:01:58,290
Voy a utilizar "com.10gen"
como el "groupId".

39
00:01:58,290 --> 00:02:01,940
El "artifactId" va a ser
M101J para la clase.

40
00:02:01,940 --> 00:02:03,850
La versión será la que venga por defecto.

41
00:02:03,850 --> 00:02:06,270
Me va a dar un paquete Java por defecto.

42
00:02:06,270 --> 00:02:08,989
"10gen" no es un nombre de paquete
válido, así que lo voy a cambiar

43
00:02:08,989 --> 00:02:11,230
a "tengen",

44
00:02:11,230 --> 00:02:18,310
T, E, N. Voy a poner OK y me
ha creado un nuevo directorio

45
00:02:18,310 --> 00:02:21,580
basado en el nombre del "artifactId".

46
00:02:21,580 --> 00:02:25,510
Ahí hay un par de cosas.

47
00:02:25,510 --> 00:02:27,640
Una es el pom.xml,
el cual vamos a ver

48
00:02:27,640 --> 00:02:28,420
en un minuto.

49
00:02:28,420 --> 00:02:32,850
Luego creó un directorio
"src" con dos subdirectorios

50
00:02:32,850 --> 00:02:37,670
"main" y "test", y dentro
de cada uno de ellos, "java".

51
00:02:37,670 --> 00:02:40,220
Luego creó el paquete por
defecto que le proveí,

52
00:02:40,220 --> 00:02:41,220
"com.tengen".

53
00:02:41,220 --> 00:02:46,030
Hasta creó un "App.java"
y un "AppTest.java".

54
00:02:46,030 --> 00:02:48,130
Puedo ejecutar "App.java"

55
00:02:48,130 --> 00:02:49,190
y lo puedes ver.

56
00:02:49,190 --> 00:02:50,860
Te mostraré exactamente qué puso ahí.

57
00:02:50,860 --> 00:02:53,560

58
00:02:53,560 --> 00:02:55,320
Simplemente "Hello World".

59
00:02:55,320 --> 00:03:01,110
Puedo ejecutar esto utilizando
un plugin llamado "exec" para Maven.

60
00:03:01,110 --> 00:03:04,380
Digo "mvn compile", para
compilar los archivos y

61
00:03:04,380 --> 00:03:06,880
luego "exec" un programa Java

62
00:03:06,880 --> 00:03:10,560
y la clase principal
es "com.tengen.App".

63
00:03:10,560 --> 00:03:13,450
Así que especifico eso en las
propiedades del sistema "-D"

64
00:03:13,450 --> 00:03:16,750
y luego en el nombre de la propiedad,
"exec.mainClass" y luego el

65
00:03:16,750 --> 00:03:17,770
nombre de la clase principal

66
00:03:17,770 --> 00:03:21,620
y puedo ejecutar eso así.

67
00:03:21,620 --> 00:03:23,690
Puedes ver que ha impreso "Hello World".

68
00:03:23,690 --> 00:03:27,140
Pero para esta clase, va a ser
más fácil hacer demostraciones

69
00:03:27,140 --> 00:03:28,900
si utilizo un IDE.

70
00:03:28,900 --> 00:03:32,210
El IDE que llevo utilizando
por mucho tiempo se llama

71
00:03:32,210 --> 00:03:35,720
IntelliJ IDEA, así que ése
es el que vamos a utilizar

72
00:03:35,720 --> 00:03:37,110
para las lecciones.

73
00:03:37,110 --> 00:03:40,250
IntelliJ tiene muy buen
soporte para Maven.

74
00:03:40,250 --> 00:03:43,620
La manera en que cargas un
proyecto Maven es abriendo

75
00:03:43,620 --> 00:03:46,660
IntelliJ y utilizando "Import Project".

76
00:03:46,660 --> 00:03:51,340
Yo ya hice esto antes, así que
está en el directorio que acabo

77
00:03:51,340 --> 00:03:53,510
de crear, M101J/pom.xml.

78
00:03:53,510 --> 00:03:56,086
Y selecciono el archivo pom.

79
00:03:56,086 --> 00:03:58,860
Y quiero que importe proyectos
automáticamente para que si

80
00:03:58,860 --> 00:04:01,400
actualizo las dependencias

81
00:04:01,400 --> 00:04:03,650
las vuelva a importar automáticamente.

82
00:04:03,650 --> 00:04:05,130
Quiero descargar el código fuente

83
00:04:05,130 --> 00:04:06,580
y la documentación si está disponible.

84
00:04:06,580 --> 00:04:09,200

85
00:04:09,200 --> 00:04:15,110
Voy a seleccionar JDK 1.6 y el
nombre del proyecto será

86
00:04:15,110 --> 00:04:16,029
M101J por defecto.

87
00:04:16,029 --> 00:04:18,310
Y ahí termino.

88
00:04:18,310 --> 00:04:21,570
Puedes ver acá que tengo mi POM,
que fue creado por el plugin

89
00:04:21,570 --> 00:04:26,410
Archetype y aquí está
mi directorio "src".

90
00:04:26,410 --> 00:04:27,770
Y aquí está la aplicación
que ejecutamos.

91
00:04:27,770 --> 00:04:28,890
También podemos ejecutar esto,

92
00:04:28,890 --> 00:04:31,040
obviamente, desde IntelliJ.

93
00:04:31,040 --> 00:04:32,570
E imprime "Hello World".

94
00:04:32,570 --> 00:04:37,580
Entonces en esta lección vimos
cómo crear un programa "Hello World"

95
00:04:37,580 --> 00:04:43,100
simple con Maven, utilizando
Maven para crear un simple pom.xml

96
00:04:43,100 --> 00:04:46,320
usando el plugin Archetype y
luego como ejectuar una clase

97
00:04:46,320 --> 00:04:47,570
con el plugin Exec.

98
00:04:47,570 --> 00:04:48,670